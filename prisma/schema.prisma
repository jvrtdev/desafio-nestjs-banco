// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String   @id @default(uuid())
  fullName  String   @map("full_name")
  cpf       String   @unique
  dateBirth DateTime @map("date_birth")
  account   Account?

  createdAt DateTime @default(now()) @map("created_at")

  @@map("customers")
}

model Account {
  id                Int                  @id
  balance           Decimal              @default(0)
  status            AccountStatus        @default(ACTIVE)
  customer          Customer             @relation(fields: [customerId], references: [id])
  customerId        String               @unique @map("customer_id")
  originAccount     TransactionAccount[] @relation("OriginAccount")
  destinationAcount TransactionAccount[] @relation("DestinationAccount")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("accounts")
}

model Transaction {
  id          String               @id @default(uuid())
  type        TransactionsTypes
  amount      Decimal
  createdAt   DateTime             @default(now()) @map("created_at")
  transaction TransactionAccount[]

  @@map("transactions")
}

model TransactionAccount {
  id                   String @id @default(uuid())
  originAccountId      Int    @map("origin_account_id")
  destinationAccountId Int    @map("destination_account_id")
  transactionId        String

  originAccount      Account     @relation("OriginAccount", fields: [originAccountId], references: [id])
  destinationAccount Account     @relation("DestinationAccount", fields: [destinationAccountId], references: [id])
  transaction        Transaction @relation(fields: [transactionId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@map("transations_account")
}

model Log {
  id            String         @id @default(uuid())
  modelName     ModelNameEnum? @map("model_name")
  accountId     Int?           @map("account_id")
  transactionId String?        @map("transation_id")
  action        LogActions?
  message       String?

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamp
}

enum TransactionsTypes {
  DEPOSIT
  WITHDRAWAL
  TRANSFER
}

enum AccountStatus {
  INACTIVE
  ACTIVE
}

enum ModelNameEnum {
  ACCOUNT
  CUSTOMER
  TRANSACTION
  TRANSACTION_ACCOUNT
}

enum LogActions {
  DEPOSIT
  TRANSFER
  WITHDRAWAL
  LOGOUT
  LOGGED
  CREATED
}
